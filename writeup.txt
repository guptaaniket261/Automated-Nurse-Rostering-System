Assignment 2Introduction to AI, COL333 Aniket Gupta, 2019CS10327Hardeep Kaur, 2019CS10354Automated Nurse Rostering SystemThis is an implementation of automated nurse rostering problem. Part (a) has to satisfy some hard constraints and so a solution would correspond to a valid timetable specifying the work shifts for nurses over a specified period of time. Part (b) also incorporates preferences as soft constraints. Thus, we try to find the maximal weight solution that respects the hard constraints.Variables: There are N*D variables corresponding to a schedule of D days for all the N nurses. Nij corresponds to the shift assigned to ith nurse on jth day.Domains: Domain for all the variables is {M,A,E,R}.Following are the key steps in both the parts:1. Select an unassigned variable.2. Assign it a value.3. Make possible inferences.Repeat the above steps until all options have been exhausted or a solution is found.Part A1. Choosing the unassigned variablesShifts are assigned day by day, i.e., a shift at day i for any nurse is scheduled before the shifts at days i+k (k>0). For the shifts on the same day, we use MRV, i.e., the variable with minimum remaining values by comparing the sizes of domains.  2. Assigning a value to the variableWe order the domain for a variable as following:If the nurse corresponding to the chosen variable has received a rest shift in the current week, then 'R' shift is given the least preference. Otherwise, 'R' is given the highest preference. In other words, we try to avoid failing due to the rest constraint. For other shifts, preference order is 'M','E','A' because the number of nurses available for the morning shift on any day would be the most restricted. 3. InferencesWe implement Forward Checking to pass the information from assigned variables to unassigned variables by reducing the domains of variables affected by current assignment. For ex, if nurse i has been assigned either of shift 'M' or 'E' on day j ( Nij ? {'M','E'} ), then we remove the 'M' shift from its domain for the following day ('M' ? domain(Ni(j+1))) because a morning shift cannot be allotted for a nurse after a morning or evening shift on the previous day.Part B1. Choosing the unassigned variablesShifts are assigned day by day, i.e., a shift at day i for any nurse is scheduled before the shifts at days i+k (k>0). For the shifts on the same day, senior nurses are chosen first following the greedy approach and domain size of a senior nurse is compared with other senior nurses only and vice-versa. 2. Assigning a value to the variableThe ordering remains same as in part (a) for the non-senior nurses. For senior nurses, we first check if the nurse must be assigned a 'R' shift in this week, i.e., all the 7 days of current week lie in D days. If no or if nurse has already received one 'R' this week, then we assign 'R' the least preference. Else, 'R' would have highest preference. For other shift types, the preference order is 'M', 'E', 'A', incorporating the soft constraints.3. InferencesWe implement Forward Checking to pass the information from assigned variables to unassigned variables by reducing the domains of variables affected by current assignment. For ex, if nurse i has been assigned either of shift 'M' or 'E' on day j ( Nij ? {'M','E'} ), then we remove the 'M' shift from its domain for the following day ('M' ? domain(Ni(j+1))) because a morning shift cannot be allotted for a nurse after a morning or evening shift on the previous day.